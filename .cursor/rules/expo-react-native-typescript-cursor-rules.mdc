---
description: Expo React Native TypeScript Cursor Rules
globs: 
alwaysApply: false
---
You are an expert in TypeScript, React Native, Tailwind, NativeWind, Zustand, Jest, React Native Testing Library, Expo, and Mobile UI development.

Code Style and Structure

- Write concise, technical TypeScript code with accurate examples.
- Use functional and declarative programming patterns; avoid classes.
- Prefer iteration and modularization over code duplication.
- Use descriptive variable names with auxiliary verbs (e.g., isLoading, hasError).
- Structure files: exported component, subcomponents, helpers, static content, types.
- Follow Expo's official documentation for setting up and configuring your projects: https://docs.expo.dev/
- Follow React Native Testing Library official documentation: https://callstack.github.io/react-native-testing-library/docs/start/intro

Naming Conventions

- Use lowercase with dashes for directories (e.g., components/auth-wizard).
- Favor named exports for components.

TypeScript Usage

- Use TypeScript for all code; prefer interfaces over types.
- Avoid enums; use maps instead.
- Use functional components with TypeScript interfaces.
- Use strict mode in TypeScript for better type safety.

Syntax and Formatting

- Use the "function" keyword for pure functions.
- Avoid unnecessary curly braces in conditionals; use concise syntax for simple statements.
- Use declarative JSX.
- Use Prettier for consistent code formatting.

UI and Styling

- Use React Native Reusables components for common UI patterns and layouts. Here you have the official documentation: https://rnr-docs.vercel.app/getting-started/introduction/
- The default folder where the components are available is components/ui.
- Implement responsive design with Flexbox and Expo's useWindowDimensions for screen size adjustments.
- Use NativeWind (Tailwind CSS for React Native) for component styling with className props.
- Respect the dark mode support using the custom useColorScheme hook that wraps NativeWind's implementation.
- Ensure high accessibility (a11y) standards using testID props and native accessibility props.
- Leverage react-native-reanimated for performant animations when needed.

Safe Area Management

- Use SafeAreaProvider from react-native-safe-area-context to manage safe areas globally in your app.
- Wrap top-level components with SafeAreaView to handle notches, status bars, and other screen insets on both iOS and Android.
- Use SafeAreaScrollView for scrollable content to ensure it respects safe area boundaries.
- Avoid hardcoding padding or margins for safe areas; rely on SafeAreaView and context hooks.

Performance Optimization

- Minimize unnecessary state and effects; use Zustand for state management.
- Use Expo's SplashScreen for optimized app startup experience.
- Profile and monitor performance using React Native's built-in tools and Expo's debugging features.
- Avoid unnecessary re-renders by memoizing components and using useMemo and useCallback hooks appropriately.

Navigation

- Use expo-router for routing and navigation; follow its best practices for stack, tab, and drawer navigators.
- Leverage deep linking and universal links for better user engagement and navigation flow.
- Use dynamic routes with expo-router for better navigation handling.

State Management

- Use Zustand for global state management.
- Leverage local state for component-specific state that doesn't need to be shared.
- Handle URL search parameters using expo-linking.

Error Handling

- Implement proper error handling with try/catch blocks.
- Prioritize error handling and edge cases:
  - Handle errors at the beginning of functions.
  - Use early returns for error conditions to avoid deeply nested if statements.
  - Avoid unnecessary else statements; use if-return pattern instead.
  - Implement global error boundaries to catch and handle unexpected errors.

Testing

- Write unit tests using Jest and React Native Testing Library.
- Use testID props on components to make them easily targetable in tests.
- Mock dependencies appropriately in tests using Jest's mocking capabilities.
- Consider testing common user interactions like pressing buttons and toggling UI elements.
- Test for accessibility and internationalization compliance.
- Use Expo's testing tools for running tests in different environments.
- Consider snapshot testing for components to ensure UI consistency.

Security

- Sanitize user inputs to prevent XSS attacks.
- Use AsyncStorage or SecureStore for storing sensitive data based on security requirements.
- Ensure secure communication with APIs using HTTPS and proper authentication.
- Use Expo's Security guidelines to protect your app: https://docs.expo.dev/guides/security/

Internationalization (i18n)

- Use i18next with react-i18next and expo-localization for internationalization.
- Organize translations by namespaces (generic, businessLogic, settings, etc.).
- Support multiple languages and RTL layouts.
- Ensure text scaling and font adjustments for accessibility.

Key Conventions

1. Rely on Expo's managed workflow for streamlined development and deployment.
2. Prioritize Mobile Web Vitals (Load Time, Jank, and Responsiveness).
3. Use expo-constants for managing environment variables and configuration.
4. Use expo-permissions to handle device permissions gracefully.
5. Implement expo-updates for over-the-air (OTA) updates.
6. Follow Expo's best practices for app deployment and publishing: https://docs.expo.dev/distribution/introduction/
7. Ensure compatibility with iOS and Android by testing extensively on both platforms.

API Documentation

- Use Expo's official documentation for setting up and configuring your projects: https://docs.expo.dev/
